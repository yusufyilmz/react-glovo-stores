{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/glovoAPI.js","constants/messages.js","Helpers/storeStateHelper.js","actions/category-actions.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Helpers/storeHelper.js","Helpers/arrayHelper.js","actions/store-actions.js","actions/index.js","../node_modules/babel-preset-react-app/node_modules/regenerator-runtime/runtime-module.js","../node_modules/babel-preset-react-app/node_modules/regenerator-runtime/runtime.js"],"names":["module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","GlovoAPI","fetchCategories","fetchStores","_callee","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","handleResponse","abrupt","stop","_callee2","categories","_context2","all","map","category","concat","name","resp","json","catch","i","stores","t0","ok","statusText","DAYS","checkStoreState","schedule","storeState","open","length","message","now","Date","day","getDay","hour","getHours","minute","getMinutes","scheduleDay","find","x","timeOpenParts","split","timeCloseParts","close","getCloseMessage","dayType","openDay","nextScheduleDay","closeMessage","Number","storeStateHelper","allStoresClosed","store","state","Object","objectSpread","closed","_ref","mark","dispatch","getState","success","fail","type","actionTypes","payload","_x","_x2","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","Symbol","iterator","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","storeHelper","selectedCategory","sort","y","tag","tagList","toLowerCase","foundStores","forEach","t","tagFoundStores","filter","tags","currentTag","array","j","splice","arrayUnique","fetchStore","items","filterStores","storeName","_ref4","item","_x3","_x4","d","__webpack_exports__","category_actions_fetchCategories","store_actions_fetchStore","store_actions_filterStores","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","result","keys","object","push","reverse","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","finallyEntry","complete","afterLoc","finish","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","obj","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","pushTryEntry","locs","iteratorMethod"],"mappings":"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","file":"static/js/0.fde85ecf.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","// import fetch from 'isomorphic-fetch'\nexport const GlovoAPI = {\n  fetchCategories,\n  fetchStores\n}\n\nasync function fetchCategories() {\n  const response = await fetch(`/categories`);\n  const data = await handleResponse(response);\n  return data;\n}\n\nasync function fetchStores(categories) {\n  \n  try {\n    const data = await Promise.all(categories.map(category =>\n      fetch(`/stores?category=${category.name}`)\n        .then(resp => resp.json())\n        .catch((err) => {\n          throw err;\n        })\n    ));\n\n    return categories.map((category, i) => {\n      category.stores = data[i].stores;\n      return category;\n    });\n  }\n  catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction handleResponse(response) {\n  if (!response.ok) {\n    return Promise.reject(response.statusText);\n  }\n  return response.json();\n}\n","export const NO_STORE = 'No store found matching this tag';\nexport const ERROR_OCCURED = 'There seems to be a problem here';\n","const openMessage = () => \"Open right now\"\nconst closeMessage = (day, hour) => `Next opening time: ${day} at ${hour}`\nconst DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n\nconst getStoreStates = (stores) => {\n\n    return stores.map(store => {\n        const state = checkStoreState(store.schedule);\n        return {\n            ...store,\n            open: state.open,\n            message: state.message\n        }\n    });\n}\n\nconst getCategoryStoreStates = (categories) => {\n\n    return categories.map(category => {\n        var allStoresClosed = true;\n        const stores = category.stores.map(store => {\n            const state = checkStoreState(store.schedule);\n            if (state.open) {\n                allStoresClosed = false;\n            }\n            return {\n                ...store,\n                open: state.open,\n                message: state.message\n            }\n        });\n\n        return {\n            ...category,\n            stores,\n            closed: allStoresClosed\n        }\n    })\n}\n\n\nconst checkStoreState = (schedule) => {\n\n    var storeState = {\n        open: true\n    }\n\n    if (schedule.length === 0) {\n        storeState.open = 'unknown'\n        storeState.message = 'unknown'\n        return storeState\n    }\n\n    const now = new Date();\n    let day = now.getDay();\n    day = day === 0 ? day = 6 : day - 1\n\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n\n    var scheduleDay = schedule.find(x => x.day == day);\n\n    if (scheduleDay) {\n        var timeOpenParts = scheduleDay.open.split(\":\");\n        var timeCloseParts = scheduleDay.close.split(\":\");\n\n        if (hour > timeCloseParts[0] || (hour == timeCloseParts[0] && minute > timeCloseParts[1])) {\n            //closed according to close time\n            storeState.message = getCloseMessage(schedule, day, 'next');\n            storeState.open = false;\n        }\n\n        if (hour < timeOpenParts[0] || (hour == timeOpenParts[0] && minute < timeOpenParts[1])) {\n             //closed according to open time\n            storeState.message = getCloseMessage(schedule, day);\n            storeState.open = false;\n        }\n    }\n    else {\n         //closed according to day\n        storeState.message = getCloseMessage(schedule, day, 'next');\n        storeState.open = false;\n    }\n\n    if (storeState.open) {\n        storeState.message = openMessage();\n    }\n\n    return storeState;\n}\n\n\nconst getCloseMessage = (schedule, day, dayType) => {\n\n    var openDay = {};\n\n    if (dayType === 'next') {\n        let nextScheduleDay = schedule.find(x => x.day > day);\n        if (!nextScheduleDay) {\n            // get current day earliest open hour\n            openDay = schedule[0]\n        }\n        else {\n            // get next day earliest open hour\n            openDay = nextScheduleDay\n        }\n    }\n    else {\n        openDay = schedule.find(x => x.day == day);\n    }\n\n    return closeMessage(DAYS[Number(openDay.day)], openDay.open)\n}\n\n\n\n\nexport const storeStateHelper = {\n    getCategoryStoreStates,\n    getStoreStates\n}","import * as actionTypes from '../constants/actionTypes';\nimport { GlovoAPI } from '../api/glovoAPI';\nimport { ERROR_OCCURED } from '../constants/messages';\nimport { storeStateHelper } from '../Helpers/storeStateHelper';\n\nexport const fetchCategories = () => async (dispatch, getState) => {\n\n  GlovoAPI.fetchCategories()\n    .then(data => {\n      return GlovoAPI.fetchStores(data.categories)\n    })\n    .then(data => {\n      dispatch(success(storeStateHelper.getCategoryStoreStates(data)));\n    })\n    .catch((error) => {\n        dispatch(fail(ERROR_OCCURED));\n    });\n\n  function success(data) { return { type: actionTypes.FETCH_CATEGORIES_SUCCESS, payload: data } }\n  function fail(error) { return { type: actionTypes.FETCH_CATEGORIES_ERROR, payload: error } }\n\n};\n\n\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import { arrayUnique } from './arrayHelper';\nimport { storeStateHelper } from './storeStateHelper';\n\n\nconst getStoresWithType = (categories, type) => {\n\n    const selectedCategory = categories.find(x => x.name === type)\n\n    if (selectedCategory.stores) {\n        selectedCategory.stores.sort((x, y) => y.open - x.open)\n        return storeStateHelper.getStoreStates(selectedCategory.stores)\n    }\n}\n\n\nconst getStoresWithTag = (store, tag) => {\n\n    var tagList = tag.toLowerCase().split(' ')\n    var foundStores = [];\n\n    //search every tag in stores\n    tagList.forEach(t => {\n        var tagFoundStores = store.stores.filter(store => store.tags.find(currentTag => currentTag.toLowerCase() === t));\n        if (tagFoundStores && tagFoundStores.length > 0) {\n            foundStores = [...foundStores, ...tagFoundStores]\n        }\n    })\n\n    if (foundStores.length > 0) {\n        foundStores.sort((x, y) => y.open - x.open)\n        return arrayUnique(foundStores);\n    }\n\n}\n\n\nexport const storeHelper = {\n    getStoresWithType,\n    getStoresWithTag\n}","\nexport function arrayUnique(array) {\n    var a = array.concat();\n    for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n    return a;\n  }","import * as actionTypes from '../constants/actionTypes';\nimport { NO_STORE, ERROR_OCCURED } from '../constants/messages';\nimport { storeHelper } from '../Helpers/storeHelper';\n\nexport const fetchStore = (type) => async (dispatch, getState) => {\n\n  const stores = storeHelper.getStoresWithType(getState().category.items, type)\n\n  if (stores) {\n    dispatch(success(stores));\n  }\n  else {\n    dispatch(fail(ERROR_OCCURED));\n  }\n\n  function success(data) { return { type: actionTypes.FETCH_STORE_SUCCESS, payload: data } }\n  function fail(error) { return { type: actionTypes.FETCH_STORE_ERROR, payload: error } }\n};\n\n\n\nexport const filterStores = (tag, storeName) => async (dispatch, getState) => {\n\n  const store = getState().category.items.find(item => item.name === storeName);\n  const foundStores = storeHelper.getStoresWithTag(store, tag)\n\n  if (foundStores && foundStores.length > 0) {\n    dispatch(success(foundStores));\n  }\n  else {\n    dispatch(fail(NO_STORE));\n  }\n\n  function success(data) { return { type: actionTypes.FILTER_STORE_SUCCESS, payload: data } }\n  function fail(error) { return { type: actionTypes.FILTER_STORE_ERROR, payload: error } }\n};\n\n","export * from './category-actions.js';\nexport * from './store-actions.js';\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function (global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  runtime.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n}( // In sloppy mode, unbound `this` refers to the global object, fallback to\n// Function constructor if we're in global strict mode. That is sadly a form\n// of indirect eval which violates Content Security Policy.\nfunction () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")());"],"sourceRoot":""}